from flask_restful import Resource, abort, reqparse
from models.car import Car
from models.car_model import Model


def not_found(item):
    abort(404, error="404", message="{} not found".format(item))


parser = reqparse.RequestParser()
parser.add_argument('avail')

class CarList(Resource):
    def get(self):
        args = parser.parse_args()

        if args['avail']:
            avail = 1 if str.lower(args['avail']) == 'true' else 0
            cars_query = Car.query.filter(Car.avail == avail)
        else:
            cars_query = Car.query

        if cars_query.count() == 0:
            not_found('cars')

        cars = cars_query.all()

        car_list = []
        for car in cars:
            car_list.append(car.serialize)

        return car_list

class CarItem(Resource):
    def get(self, car_id):
        car_query = Car.query.filter(Car.id==car_id)
        if car_query.count() == 0:
            not_found('car')
        car_item = car_query.first()
        return car_item.serialize

class ModelList(Resource):
    def get(self):
        model_query = Model.query

        if model_query.count() == 0:
            not_found('models')

        models = model_query.all()

        model_list = []
        for model in models:
            model_list.append(model.serialize)

        return model_list

class ModelItem(Resource):
    def get(self, model_id):
        model_query = Model.query.filter(Model.id==model_id)
        if model_query.count() == 0:
            not_found('model')
        model_item = model_query.first()
        return model_item.serialize